// Copyright 2018 REMME
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------

syntax = "proto3";


message PubKeyMethod {
    enum Method {
        STORE = 0;
        REVOKE = 1;
        STORE_AND_PAY = 2;
    }
}

message NewPubKeyPayload {
    enum HashingAlgorithm {
        SHA256 = 0;
        SHA512 = 1;
    }

    message RSAConfiguration {
        enum Padding {
            PSS = 0;
            PKCS1v15 = 1;
        }

        bytes key = 1;
        Padding padding = 2;
    }

    message ECDSAConfiguration {
        enum EC {
            SECP256k1 = 0;
        }

        bytes key = 1;
        EC ec = 2;
    }

    message Ed25519Configuration {
        bytes key = 1;
    }

    HashingAlgorithm hashing_algorithm = 1;

    bytes entity_hash = 2;
    bytes entity_hash_signature = 3;

    uint32 valid_from = 4;
    uint32 valid_to = 5;
    
    oneof configuration {
        RSAConfiguration rsa = 6;
        ECDSAConfiguration ecdsa = 7;
        Ed25519Configuration ed25519 = 8;
    }
}

message NewPubKeyStoreAndPayPayload {
    // The payload for account which want to pay for other account public keys storing.
    // A first account -> send payload -> A second account -> 
    // -> send transaction with first account's public key -> Remme core.
    // So Remme core charges tokens from a second account, but store a first account's public key.
    // Owner here is a first account.
    NewPubKeyPayload pub_key_payload = 1;
    bytes owner_public_key = 2;
    bytes signature_by_owner = 3;
}

message RevokePubKeyPayload {
    // The address of a certificate in the storage generated by the transaction processor.
    string address = 1;
}

message PubKeyStorage {
    // The UID field of a certificate.
    string owner = 1;
    // indicates if this key was revoked
    NewPubKeyPayload payload = 2;
    bool is_revoked = 3;
}
